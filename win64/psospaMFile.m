function [methodinfo,structs,enuminfo,ThunkLibName]=psospaMFile
%PSOSPAMFILE Create structures to define interfaces found in 'psospaApi'.

%This function was generated by loadlibrary.m parser version  on Mon Sep 23 11:04:21 2024
%perl options:'psospaApi.i -outfile=psospaMFile.m -thunkfile=psospa_thunk_pcwin64.c -header=psospaApi.h'
ival={cell(1,0)}; % change 0 to the actual number of functions to preallocate the data.
structs=[];enuminfo=[];fcnNum=1;
fcns=struct('name',ival,'calltype',ival,'LHS',ival,'RHS',ival,'alias',ival,'thunkname', ival);
MfilePath=fileparts(mfilename('fullpath'));
ThunkLibName=fullfile(MfilePath,'psospa_thunk_pcwin64');
% PICO_STATUS psospaOpenUnit ( int16_t * handle , int8_t * serial , PICO_DEVICE_RESOLUTION resolution , PICO_USB_POWER_DETAILS * powerDetails ); 
fcns.thunkname{fcnNum}='uint32voidPtrvoidPtrPICO_DEVICE_RESOLUTIONvoidPtrThunk';fcns.name{fcnNum}='psospaOpenUnit'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int16Ptr', 'int8Ptr', 'enPicoDeviceResolution', 'tPicoUsbPowerDetailsPtr'};fcnNum=fcnNum+1;
% PICO_STATUS psospaGetUnitInfo ( int16_t handle , int8_t * string , int16_t stringLength , int16_t * requiredSize , PICO_INFO info ); 
fcns.thunkname{fcnNum}='uint32int16voidPtrint16voidPtruint32Thunk';fcns.name{fcnNum}='psospaGetUnitInfo'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int16', 'int8Ptr', 'int16', 'int16Ptr', 'uint32'};fcnNum=fcnNum+1;
% PICO_STATUS psospaGetVariantDetails ( const int8_t * variantName , int16_t variantNameLength , int8_t * outputString , int32_t * outputStringLength , PICO_TEXT_FORMAT textFormat ); 
fcns.thunkname{fcnNum}='uint32voidPtrint16voidPtrvoidPtrPICO_TEXT_FORMATThunk';fcns.name{fcnNum}='psospaGetVariantDetails'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int8Ptr', 'int16', 'int8Ptr', 'int32Ptr', 'enPicoTextFormat'};fcnNum=fcnNum+1;
% PICO_STATUS psospaCloseUnit ( int16_t handle ); 
fcns.thunkname{fcnNum}='uint32int16Thunk';fcns.name{fcnNum}='psospaCloseUnit'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int16'};fcnNum=fcnNum+1;
% PICO_STATUS psospaMemorySegments ( int16_t handle , uint64_t nSegments , uint64_t * nMaxSamples ); 
fcns.thunkname{fcnNum}='uint32int16uint64voidPtrThunk';fcns.name{fcnNum}='psospaMemorySegments'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int16', 'uint64', 'uint64Ptr'};fcnNum=fcnNum+1;
% PICO_STATUS psospaMemorySegmentsBySamples ( int16_t handle , uint64_t nSamples , uint64_t * nMaxSegments ); 
fcns.thunkname{fcnNum}='uint32int16uint64voidPtrThunk';fcns.name{fcnNum}='psospaMemorySegmentsBySamples'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int16', 'uint64', 'uint64Ptr'};fcnNum=fcnNum+1;
% PICO_STATUS psospaGetMaximumAvailableMemory ( int16_t handle , uint64_t * nMaxSamples , PICO_DEVICE_RESOLUTION resolution ); 
fcns.thunkname{fcnNum}='uint32int16voidPtrPICO_DEVICE_RESOLUTIONThunk';fcns.name{fcnNum}='psospaGetMaximumAvailableMemory'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int16', 'uint64Ptr', 'enPicoDeviceResolution'};fcnNum=fcnNum+1;
% PICO_STATUS psospaQueryMaxSegmentsBySamples ( int16_t handle , uint64_t nSamples , uint32_t nChannelEnabled , uint64_t * nMaxSegments , PICO_DEVICE_RESOLUTION resolution ); 
fcns.thunkname{fcnNum}='uint32int16uint64uint32voidPtrPICO_DEVICE_RESOLUTIONThunk';fcns.name{fcnNum}='psospaQueryMaxSegmentsBySamples'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int16', 'uint64', 'uint32', 'uint64Ptr', 'enPicoDeviceResolution'};fcnNum=fcnNum+1;
% PICO_STATUS psospaSetChannelOn ( int16_t handle , PICO_CHANNEL channel , PICO_COUPLING coupling , int64_t rangeMin , int64_t rangeMax , PICO_PROBE_RANGE_INFO rangeType , double analogueOffset , PICO_BANDWIDTH_LIMITER bandwidth ); 
fcns.thunkname{fcnNum}='uint32int16PICO_CHANNELPICO_COUPLINGint64int64PICO_PROBE_RANGE_INFOdoublePICO_BANDWIDTH_LIMITERThunk';fcns.name{fcnNum}='psospaSetChannelOn'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int16', 'enPicoChannel', 'enPicoCoupling', 'int64', 'int64', 'enPicoProbeRangeInfo', 'double', 'enPicoBandwidthLimiter'};fcnNum=fcnNum+1;
% PICO_STATUS psospaSetChannelOff ( int16_t handle , PICO_CHANNEL channel ); 
fcns.thunkname{fcnNum}='uint32int16PICO_CHANNELThunk';fcns.name{fcnNum}='psospaSetChannelOff'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int16', 'enPicoChannel'};fcnNum=fcnNum+1;
% PICO_STATUS psospaSetDigitalPortOn ( int16_t handle , PICO_CHANNEL port , int16_t * logicThresholdLevel , int16_t logicThresholdLevelLength , PICO_DIGITAL_PORT_HYSTERESIS hysteresis ); 
fcns.thunkname{fcnNum}='uint32int16PICO_CHANNELvoidPtrint16PICO_DIGITAL_PORT_HYSTERESISThunk';fcns.name{fcnNum}='psospaSetDigitalPortOn'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int16', 'enPicoChannel', 'int16Ptr', 'int16', 'enPicoDigitalPortHysteresis'};fcnNum=fcnNum+1;
% PICO_STATUS psospaSetDigitalPortOff ( int16_t handle , PICO_CHANNEL port ); 
fcns.thunkname{fcnNum}='uint32int16PICO_CHANNELThunk';fcns.name{fcnNum}='psospaSetDigitalPortOff'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int16', 'enPicoChannel'};fcnNum=fcnNum+1;
% PICO_STATUS psospaGetTimebase ( int16_t handle , uint32_t timebase , uint64_t noSamples , double * timeIntervalNanoseconds , uint64_t * maxSamples , uint64_t segmentIndex ); 
fcns.thunkname{fcnNum}='uint32int16uint32uint64voidPtrvoidPtruint64Thunk';fcns.name{fcnNum}='psospaGetTimebase'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int16', 'uint32', 'uint64', 'doublePtr', 'uint64Ptr', 'uint64'};fcnNum=fcnNum+1;
% PICO_STATUS psospaSigGenWaveform ( int16_t handle , PICO_WAVE_TYPE waveType , int16_t * buffer , uint64_t bufferLength ); 
fcns.thunkname{fcnNum}='uint32int16PICO_WAVE_TYPEvoidPtruint64Thunk';fcns.name{fcnNum}='psospaSigGenWaveform'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int16', 'enPicoWaveType', 'int16Ptr', 'uint64'};fcnNum=fcnNum+1;
% PICO_STATUS psospaSigGenRange ( int16_t handle , double peakToPeakVolts , double offsetVolts ); 
fcns.thunkname{fcnNum}='uint32int16doubledoubleThunk';fcns.name{fcnNum}='psospaSigGenRange'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int16', 'double', 'double'};fcnNum=fcnNum+1;
% PICO_STATUS psospaSigGenWaveformDutyCycle ( int16_t handle , double dutyCyclePercent ); 
fcns.thunkname{fcnNum}='uint32int16doubleThunk';fcns.name{fcnNum}='psospaSigGenWaveformDutyCycle'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int16', 'double'};fcnNum=fcnNum+1;
% PICO_STATUS psospaSigGenTrigger ( int16_t handle , PICO_SIGGEN_TRIG_TYPE triggerType , PICO_SIGGEN_TRIG_SOURCE triggerSource , uint64_t cycles , uint64_t autoTriggerPicoSeconds ); 
fcns.thunkname{fcnNum}='uint32int16PICO_SIGGEN_TRIG_TYPEPICO_SIGGEN_TRIG_SOURCEuint64uint64Thunk';fcns.name{fcnNum}='psospaSigGenTrigger'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int16', 'enPicoSigGenTrigType', 'enPicoSigGenTrigSource', 'uint64', 'uint64'};fcnNum=fcnNum+1;
% PICO_STATUS psospaSigGenFrequency ( int16_t handle , double frequencyHz ); 
fcns.thunkname{fcnNum}='uint32int16doubleThunk';fcns.name{fcnNum}='psospaSigGenFrequency'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int16', 'double'};fcnNum=fcnNum+1;
% PICO_STATUS psospaSigGenFrequencySweep ( int16_t handle , double stopFrequencyHz , double frequencyIncrement , double dwellTimeSeconds , PICO_SWEEP_TYPE sweepType ); 
fcns.thunkname{fcnNum}='uint32int16doubledoubledoublePICO_SWEEP_TYPEThunk';fcns.name{fcnNum}='psospaSigGenFrequencySweep'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int16', 'double', 'double', 'double', 'enPicoSweepType'};fcnNum=fcnNum+1;
% PICO_STATUS psospaSigGenPhase ( int16_t handle , uint64_t deltaPhase ); 
fcns.thunkname{fcnNum}='uint32int16uint64Thunk';fcns.name{fcnNum}='psospaSigGenPhase'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int16', 'uint64'};fcnNum=fcnNum+1;
% PICO_STATUS psospaSigGenPhaseSweep ( int16_t handle , uint64_t stopDeltaPhase , uint64_t deltaPhaseIncrement , uint64_t dwellCount , PICO_SWEEP_TYPE sweepType ); 
fcns.thunkname{fcnNum}='uint32int16uint64uint64uint64PICO_SWEEP_TYPEThunk';fcns.name{fcnNum}='psospaSigGenPhaseSweep'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int16', 'uint64', 'uint64', 'uint64', 'enPicoSweepType'};fcnNum=fcnNum+1;
% PICO_STATUS psospaSigGenSoftwareTriggerControl ( int16_t handle , PICO_SIGGEN_TRIG_TYPE triggerState ); 
fcns.thunkname{fcnNum}='uint32int16PICO_SIGGEN_TRIG_TYPEThunk';fcns.name{fcnNum}='psospaSigGenSoftwareTriggerControl'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int16', 'enPicoSigGenTrigType'};fcnNum=fcnNum+1;
% PICO_STATUS psospaSigGenApply ( int16_t handle , int16_t sigGenEnabled , int16_t sweepEnabled , int16_t triggerEnabled , double * frequency , double * stopFrequency , double * frequencyIncrement , double * dwellTime ); 
fcns.thunkname{fcnNum}='uint32int16int16int16int16voidPtrvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='psospaSigGenApply'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int16', 'int16', 'int16', 'int16', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr'};fcnNum=fcnNum+1;
% PICO_STATUS psospaSigGenLimits ( int16_t handle , PICO_SIGGEN_PARAMETER parameter , double * minimumPermissibleValue , double * maximumPermissibleValue , double * step ); 
fcns.thunkname{fcnNum}='uint32int16PICO_SIGGEN_PARAMETERvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='psospaSigGenLimits'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int16', 'enPicoSigGenParameter', 'doublePtr', 'doublePtr', 'doublePtr'};fcnNum=fcnNum+1;
% PICO_STATUS psospaSigGenFrequencyLimits ( int16_t handle , PICO_WAVE_TYPE waveType , uint64_t * numSamples , double * minFrequencyOut , double * maxFrequencyOut , double * minFrequencyStepOut , double * maxFrequencyStepOut , double * minDwellTimeOut , double * maxDwellTimeOut ); 
fcns.thunkname{fcnNum}='uint32int16PICO_WAVE_TYPEvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='psospaSigGenFrequencyLimits'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int16', 'enPicoWaveType', 'uint64Ptr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr'};fcnNum=fcnNum+1;
% PICO_STATUS psospaSigGenPause ( int16_t handle ); 
fcns.thunkname{fcnNum}='uint32int16Thunk';fcns.name{fcnNum}='psospaSigGenPause'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int16'};fcnNum=fcnNum+1;
% PICO_STATUS psospaSigGenRestart ( int16_t handle ); 
fcns.thunkname{fcnNum}='uint32int16Thunk';fcns.name{fcnNum}='psospaSigGenRestart'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int16'};fcnNum=fcnNum+1;
% PICO_STATUS psospaSetSimpleTrigger ( int16_t handle , int16_t enable , PICO_CHANNEL source , int16_t threshold , PICO_THRESHOLD_DIRECTION direction , uint64_t delay , uint32_t autoTriggerMicroSeconds ); 
fcns.thunkname{fcnNum}='uint32int16int16PICO_CHANNELint16PICO_THRESHOLD_DIRECTIONuint64uint32Thunk';fcns.name{fcnNum}='psospaSetSimpleTrigger'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int16', 'int16', 'enPicoChannel', 'int16', 'enPicoThresholdDirection', 'uint64', 'uint32'};fcnNum=fcnNum+1;
% PICO_STATUS psospaTriggerWithinPreTriggerSamples ( int16_t handle , PICO_TRIGGER_WITHIN_PRE_TRIGGER state ); 
fcns.thunkname{fcnNum}='uint32int16PICO_TRIGGER_WITHIN_PRE_TRIGGERThunk';fcns.name{fcnNum}='psospaTriggerWithinPreTriggerSamples'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int16', 'enPicoTriggerWithinPreTrigger'};fcnNum=fcnNum+1;
% PICO_STATUS psospaSetTriggerChannelProperties ( int16_t handle , PICO_TRIGGER_CHANNEL_PROPERTIES * channelProperties , int16_t nChannelProperties , uint32_t autoTriggerMicroSeconds ); 
fcns.thunkname{fcnNum}='uint32int16voidPtrint16uint32Thunk';fcns.name{fcnNum}='psospaSetTriggerChannelProperties'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int16', 'tPicoTriggerChannelPropertiesPtr', 'int16', 'uint32'};fcnNum=fcnNum+1;
% PICO_STATUS psospaSetTriggerChannelConditions ( int16_t handle , PICO_CONDITION * conditions , int16_t nConditions , PICO_ACTION action ); 
fcns.thunkname{fcnNum}='uint32int16voidPtrint16PICO_ACTIONThunk';fcns.name{fcnNum}='psospaSetTriggerChannelConditions'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int16', 'tPicoConditionPtr', 'int16', 'enPicoAction'};fcnNum=fcnNum+1;
% PICO_STATUS psospaSetTriggerChannelDirections ( int16_t handle , PICO_DIRECTION * directions , int16_t nDirections ); 
fcns.thunkname{fcnNum}='uint32int16voidPtrint16Thunk';fcns.name{fcnNum}='psospaSetTriggerChannelDirections'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int16', 'tPicoDirectionPtr', 'int16'};fcnNum=fcnNum+1;
% PICO_STATUS psospaSetTriggerDelay ( int16_t handle , uint64_t delay ); 
fcns.thunkname{fcnNum}='uint32int16uint64Thunk';fcns.name{fcnNum}='psospaSetTriggerDelay'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int16', 'uint64'};fcnNum=fcnNum+1;
% PICO_STATUS psospaSetTriggerHoldoffCounterBySamples ( int16_t handle , uint64_t holdoffSamples ); 
fcns.thunkname{fcnNum}='uint32int16uint64Thunk';fcns.name{fcnNum}='psospaSetTriggerHoldoffCounterBySamples'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int16', 'uint64'};fcnNum=fcnNum+1;
% PICO_STATUS psospaSetPulseWidthQualifierProperties ( int16_t handle , uint32_t lower , uint32_t upper , PICO_PULSE_WIDTH_TYPE type ); 
fcns.thunkname{fcnNum}='uint32int16uint32uint32PICO_PULSE_WIDTH_TYPEThunk';fcns.name{fcnNum}='psospaSetPulseWidthQualifierProperties'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int16', 'uint32', 'uint32', 'enPicoPulseWidthType'};fcnNum=fcnNum+1;
% PICO_STATUS psospaSetPulseWidthQualifierConditions ( int16_t handle , PICO_CONDITION * conditions , int16_t nConditions , PICO_ACTION action ); 
fcns.thunkname{fcnNum}='uint32int16voidPtrint16PICO_ACTIONThunk';fcns.name{fcnNum}='psospaSetPulseWidthQualifierConditions'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int16', 'tPicoConditionPtr', 'int16', 'enPicoAction'};fcnNum=fcnNum+1;
% PICO_STATUS psospaSetPulseWidthQualifierDirections ( int16_t handle , PICO_DIRECTION * directions , int16_t nDirections ); 
fcns.thunkname{fcnNum}='uint32int16voidPtrint16Thunk';fcns.name{fcnNum}='psospaSetPulseWidthQualifierDirections'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int16', 'tPicoDirectionPtr', 'int16'};fcnNum=fcnNum+1;
% PICO_STATUS psospaSetTriggerDigitalPortProperties ( int16_t handle , PICO_CHANNEL port , PICO_DIGITAL_CHANNEL_DIRECTIONS * directions , int16_t nDirections ); 
fcns.thunkname{fcnNum}='uint32int16PICO_CHANNELvoidPtrint16Thunk';fcns.name{fcnNum}='psospaSetTriggerDigitalPortProperties'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int16', 'enPicoChannel', 'tDigitalChannelDirectionsPtr', 'int16'};fcnNum=fcnNum+1;
% PICO_STATUS psospaSetPulseWidthDigitalPortProperties ( int16_t handle , PICO_CHANNEL port , PICO_DIGITAL_CHANNEL_DIRECTIONS * directions , int16_t nDirections ); 
fcns.thunkname{fcnNum}='uint32int16PICO_CHANNELvoidPtrint16Thunk';fcns.name{fcnNum}='psospaSetPulseWidthDigitalPortProperties'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int16', 'enPicoChannel', 'tDigitalChannelDirectionsPtr', 'int16'};fcnNum=fcnNum+1;
% PICO_STATUS psospaGetTriggerTimeOffset ( int16_t handle , int64_t * time , PICO_TIME_UNITS * timeUnits , uint64_t segmentIndex ); 
fcns.thunkname{fcnNum}='uint32int16voidPtrvoidPtruint64Thunk';fcns.name{fcnNum}='psospaGetTriggerTimeOffset'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int16', 'int64Ptr', 'enPicoTimeUnitsPtr', 'uint64'};fcnNum=fcnNum+1;
% PICO_STATUS psospaGetValuesTriggerTimeOffsetBulk ( int16_t handle , int64_t * times , PICO_TIME_UNITS * timeUnits , uint64_t fromSegmentIndex , uint64_t toSegmentIndex ); 
fcns.thunkname{fcnNum}='uint32int16voidPtrvoidPtruint64uint64Thunk';fcns.name{fcnNum}='psospaGetValuesTriggerTimeOffsetBulk'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int16', 'int64Ptr', 'enPicoTimeUnitsPtr', 'uint64', 'uint64'};fcnNum=fcnNum+1;
% PICO_STATUS psospaSetDataBuffer ( int16_t handle , PICO_CHANNEL channel , PICO_POINTER buffer , uint64_t nSamples , PICO_DATA_TYPE dataType , uint64_t waveform , PICO_RATIO_MODE downSampleRatioMode , PICO_ACTION action ); 
fcns.thunkname{fcnNum}='uint32int16PICO_CHANNELvoidPtruint64PICO_DATA_TYPEuint64PICO_RATIO_MODEPICO_ACTIONThunk';fcns.name{fcnNum}='psospaSetDataBuffer'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int16', 'enPicoChannel', 'voidPtr', 'uint64', 'enPicoDataType', 'uint64', 'enPicoRatioMode', 'enPicoAction'};fcnNum=fcnNum+1;
% PICO_STATUS psospaSetDataBuffers ( int16_t handle , PICO_CHANNEL channel , PICO_POINTER bufferMax , PICO_POINTER bufferMin , uint64_t nSamples , PICO_DATA_TYPE dataType , uint64_t waveform , PICO_RATIO_MODE downSampleRatioMode , PICO_ACTION action ); 
fcns.thunkname{fcnNum}='uint32int16PICO_CHANNELvoidPtrvoidPtruint64PICO_DATA_TYPEuint64PICO_RATIO_MODEPICO_ACTIONThunk';fcns.name{fcnNum}='psospaSetDataBuffers'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int16', 'enPicoChannel', 'voidPtr', 'voidPtr', 'uint64', 'enPicoDataType', 'uint64', 'enPicoRatioMode', 'enPicoAction'};fcnNum=fcnNum+1;
% PICO_STATUS psospaRunBlock ( int16_t handle , uint64_t noOfPreTriggerSamples , uint64_t noOfPostTriggerSamples , uint32_t timebase , double * timeIndisposedMs , uint64_t segmentIndex , psospaBlockReady lpReady , PICO_POINTER pParameter ); 
fcns.thunkname{fcnNum}='uint32int16uint64uint64uint32voidPtruint64voidPtrvoidPtrThunk';fcns.name{fcnNum}='psospaRunBlock'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int16', 'uint64', 'uint64', 'uint32', 'doublePtr', 'uint64', 'FcnPtr', 'voidPtr'};fcnNum=fcnNum+1;
% PICO_STATUS psospaIsReady ( int16_t handle , int16_t * ready ); 
fcns.thunkname{fcnNum}='uint32int16voidPtrThunk';fcns.name{fcnNum}='psospaIsReady'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int16', 'int16Ptr'};fcnNum=fcnNum+1;
% PICO_STATUS psospaRunStreaming ( int16_t handle , double * sampleInterval , PICO_TIME_UNITS sampleIntervalTimeUnits , uint64_t maxPreTriggerSamples , uint64_t maxPostTriggerSamples , int16_t autoStop , uint64_t downSampleRatio , PICO_RATIO_MODE downSampleRatioMode ); 
fcns.thunkname{fcnNum}='uint32int16voidPtrPICO_TIME_UNITSuint64uint64int16uint64PICO_RATIO_MODEThunk';fcns.name{fcnNum}='psospaRunStreaming'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int16', 'doublePtr', 'enPicoTimeUnits', 'uint64', 'uint64', 'int16', 'uint64', 'enPicoRatioMode'};fcnNum=fcnNum+1;
% PICO_STATUS psospaGetStreamingLatestValues ( int16_t handle , PICO_STREAMING_DATA_INFO * streamingDataInfo , uint64_t nStreamingDataInfos , PICO_STREAMING_DATA_TRIGGER_INFO * triggerInfo ); 
fcns.thunkname{fcnNum}='uint32int16voidPtruint64voidPtrThunk';fcns.name{fcnNum}='psospaGetStreamingLatestValues'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int16', 'tPicoStreamingDataInfoPtr', 'uint64', 'tPicoStreamingDataTriggerInfoPtr'};fcnNum=fcnNum+1;
% PICO_STATUS psospaNoOfStreamingValues ( int16_t handle , uint64_t * noOfValues ); 
fcns.thunkname{fcnNum}='uint32int16voidPtrThunk';fcns.name{fcnNum}='psospaNoOfStreamingValues'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int16', 'uint64Ptr'};fcnNum=fcnNum+1;
% PICO_STATUS psospaGetValues ( int16_t handle , uint64_t startIndex , uint64_t * noOfSamples , uint64_t downSampleRatio , PICO_RATIO_MODE downSampleRatioMode , uint64_t segmentIndex , int16_t * overflow ); 
fcns.thunkname{fcnNum}='uint32int16uint64voidPtruint64PICO_RATIO_MODEuint64voidPtrThunk';fcns.name{fcnNum}='psospaGetValues'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int16', 'uint64', 'uint64Ptr', 'uint64', 'enPicoRatioMode', 'uint64', 'int16Ptr'};fcnNum=fcnNum+1;
% PICO_STATUS psospaGetValuesBulk ( int16_t handle , uint64_t startIndex , uint64_t * noOfSamples , uint64_t fromSegmentIndex , uint64_t toSegmentIndex , uint64_t downSampleRatio , PICO_RATIO_MODE downSampleRatioMode , int16_t * overflow ); 
fcns.thunkname{fcnNum}='uint32int16uint64voidPtruint64uint64uint64PICO_RATIO_MODEvoidPtrThunk';fcns.name{fcnNum}='psospaGetValuesBulk'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int16', 'uint64', 'uint64Ptr', 'uint64', 'uint64', 'uint64', 'enPicoRatioMode', 'int16Ptr'};fcnNum=fcnNum+1;
% PICO_STATUS psospaGetValuesAsync ( int16_t handle , uint64_t startIndex , uint64_t noOfSamples , uint64_t downSampleRatio , PICO_RATIO_MODE downSampleRatioMode , uint64_t segmentIndex , PICO_POINTER lpDataReady , PICO_POINTER pParameter ); 
fcns.thunkname{fcnNum}='uint32int16uint64uint64uint64PICO_RATIO_MODEuint64voidPtrvoidPtrThunk';fcns.name{fcnNum}='psospaGetValuesAsync'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int16', 'uint64', 'uint64', 'uint64', 'enPicoRatioMode', 'uint64', 'voidPtr', 'voidPtr'};fcnNum=fcnNum+1;
% PICO_STATUS psospaGetValuesBulkAsync ( int16_t handle , uint64_t startIndex , uint64_t noOfSamples , uint64_t fromSegmentIndex , uint64_t toSegmentIndex , uint64_t downSampleRatio , PICO_RATIO_MODE downSampleRatioMode , PICO_POINTER lpDataReady , PICO_POINTER pParameter ); 
fcns.thunkname{fcnNum}='uint32int16uint64uint64uint64uint64uint64PICO_RATIO_MODEvoidPtrvoidPtrThunk';fcns.name{fcnNum}='psospaGetValuesBulkAsync'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int16', 'uint64', 'uint64', 'uint64', 'uint64', 'uint64', 'enPicoRatioMode', 'voidPtr', 'voidPtr'};fcnNum=fcnNum+1;
% PICO_STATUS psospaGetValuesOverlapped ( int16_t handle , uint64_t startIndex , uint64_t * noOfSamples , uint64_t downSampleRatio , PICO_RATIO_MODE downSampleRatioMode , uint64_t fromSegmentIndex , uint64_t toSegmentIndex , int16_t * overflow ); 
fcns.thunkname{fcnNum}='uint32int16uint64voidPtruint64PICO_RATIO_MODEuint64uint64voidPtrThunk';fcns.name{fcnNum}='psospaGetValuesOverlapped'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int16', 'uint64', 'uint64Ptr', 'uint64', 'enPicoRatioMode', 'uint64', 'uint64', 'int16Ptr'};fcnNum=fcnNum+1;
% PICO_STATUS psospaStopUsingGetValuesOverlapped ( int16_t handle ); 
fcns.thunkname{fcnNum}='uint32int16Thunk';fcns.name{fcnNum}='psospaStopUsingGetValuesOverlapped'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int16'};fcnNum=fcnNum+1;
% PICO_STATUS psospaGetNoOfCaptures ( int16_t handle , uint64_t * nCaptures ); 
fcns.thunkname{fcnNum}='uint32int16voidPtrThunk';fcns.name{fcnNum}='psospaGetNoOfCaptures'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int16', 'uint64Ptr'};fcnNum=fcnNum+1;
% PICO_STATUS psospaGetNoOfProcessedCaptures ( int16_t handle , uint64_t * nProcessedCaptures ); 
fcns.thunkname{fcnNum}='uint32int16voidPtrThunk';fcns.name{fcnNum}='psospaGetNoOfProcessedCaptures'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int16', 'uint64Ptr'};fcnNum=fcnNum+1;
% PICO_STATUS psospaStop ( int16_t handle ); 
fcns.thunkname{fcnNum}='uint32int16Thunk';fcns.name{fcnNum}='psospaStop'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int16'};fcnNum=fcnNum+1;
% PICO_STATUS psospaSetNoOfCaptures ( int16_t handle , uint64_t nCaptures ); 
fcns.thunkname{fcnNum}='uint32int16uint64Thunk';fcns.name{fcnNum}='psospaSetNoOfCaptures'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int16', 'uint64'};fcnNum=fcnNum+1;
% PICO_STATUS psospaGetTriggerInfo ( int16_t handle , PICO_TRIGGER_INFO * triggerInfo , uint64_t firstSegmentIndex , uint64_t segmentCount ); 
fcns.thunkname{fcnNum}='uint32int16voidPtruint64uint64Thunk';fcns.name{fcnNum}='psospaGetTriggerInfo'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int16', 'tPicoTriggerInfoPtr', 'uint64', 'uint64'};fcnNum=fcnNum+1;
% PICO_STATUS psospaEnumerateUnits ( int16_t * count , int8_t * serials , int16_t * serialLth ); 
fcns.thunkname{fcnNum}='uint32voidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='psospaEnumerateUnits'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int16Ptr', 'int8Ptr', 'int16Ptr'};fcnNum=fcnNum+1;
% PICO_STATUS psospaPingUnit ( int16_t handle ); 
fcns.thunkname{fcnNum}='uint32int16Thunk';fcns.name{fcnNum}='psospaPingUnit'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int16'};fcnNum=fcnNum+1;
% PICO_STATUS psospaGetAnalogueOffsetLimits ( int16_t handle , int64_t rangeMin , int64_t rangeMax , PICO_PROBE_RANGE_INFO rangeType , PICO_COUPLING coupling , double * maximumVoltage , double * minimumVoltage ); 
fcns.thunkname{fcnNum}='uint32int16int64int64PICO_PROBE_RANGE_INFOPICO_COUPLINGvoidPtrvoidPtrThunk';fcns.name{fcnNum}='psospaGetAnalogueOffsetLimits'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int16', 'int64', 'int64', 'enPicoProbeRangeInfo', 'enPicoCoupling', 'doublePtr', 'doublePtr'};fcnNum=fcnNum+1;
% PICO_STATUS psospaGetMinimumTimebaseStateless ( int16_t handle , PICO_CHANNEL_FLAGS enabledChannelFlags , uint32_t * timebase , double * timeInterval , PICO_DEVICE_RESOLUTION resolution ); 
fcns.thunkname{fcnNum}='uint32int16PICO_CHANNEL_FLAGSvoidPtrvoidPtrPICO_DEVICE_RESOLUTIONThunk';fcns.name{fcnNum}='psospaGetMinimumTimebaseStateless'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int16', 'enPicoChannelFlags', 'uint32Ptr', 'doublePtr', 'enPicoDeviceResolution'};fcnNum=fcnNum+1;
% PICO_STATUS psospaNearestSampleIntervalStateless ( int16_t handle , PICO_CHANNEL_FLAGS enabledChannelFlags , double timeIntervalRequested , uint8_t roundFaster , PICO_DEVICE_RESOLUTION resolution , uint32_t * timebase , double * timeIntervalAvailable ); 
fcns.thunkname{fcnNum}='uint32int16PICO_CHANNEL_FLAGSdoubleuint8PICO_DEVICE_RESOLUTIONvoidPtrvoidPtrThunk';fcns.name{fcnNum}='psospaNearestSampleIntervalStateless'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int16', 'enPicoChannelFlags', 'double', 'uint8', 'enPicoDeviceResolution', 'uint32Ptr', 'doublePtr'};fcnNum=fcnNum+1;
% PICO_STATUS psospaSetDeviceResolution ( int16_t handle , PICO_DEVICE_RESOLUTION resolution ); 
fcns.thunkname{fcnNum}='uint32int16PICO_DEVICE_RESOLUTIONThunk';fcns.name{fcnNum}='psospaSetDeviceResolution'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int16', 'enPicoDeviceResolution'};fcnNum=fcnNum+1;
% PICO_STATUS psospaGetDeviceResolution ( int16_t handle , PICO_DEVICE_RESOLUTION * resolution ); 
fcns.thunkname{fcnNum}='uint32int16voidPtrThunk';fcns.name{fcnNum}='psospaGetDeviceResolution'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int16', 'enPicoDeviceResolutionPtr'};fcnNum=fcnNum+1;
% PICO_STATUS psospaQueryOutputEdgeDetect ( int16_t handle , int16_t * state ); 
fcns.thunkname{fcnNum}='uint32int16voidPtrThunk';fcns.name{fcnNum}='psospaQueryOutputEdgeDetect'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int16', 'int16Ptr'};fcnNum=fcnNum+1;
% PICO_STATUS psospaSetOutputEdgeDetect ( int16_t handle , int16_t state ); 
fcns.thunkname{fcnNum}='uint32int16int16Thunk';fcns.name{fcnNum}='psospaSetOutputEdgeDetect'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int16', 'int16'};fcnNum=fcnNum+1;
% PICO_STATUS psospaGetScalingValues ( int16_t handle , PICO_SCALING_FACTORS_FOR_RANGE_TYPES_VALUES * scalingValues , int16_t nChannels ); 
fcns.thunkname{fcnNum}='uint32int16voidPtrint16Thunk';fcns.name{fcnNum}='psospaGetScalingValues'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int16', 'tPicoScalingFactorsForRangeTypesPtr', 'int16'};fcnNum=fcnNum+1;
% PICO_STATUS psospaGetAdcLimits ( int16_t handle , PICO_DEVICE_RESOLUTION resolution , int16_t * minValue , int16_t * maxValue ); 
fcns.thunkname{fcnNum}='uint32int16PICO_DEVICE_RESOLUTIONvoidPtrvoidPtrThunk';fcns.name{fcnNum}='psospaGetAdcLimits'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int16', 'enPicoDeviceResolution', 'int16Ptr', 'int16Ptr'};fcnNum=fcnNum+1;
% PICO_STATUS psospaCheckForUpdate ( int16_t handle , PICO_FIRMWARE_INFO * firmwareInfos , int16_t * nFirmwareInfos , uint16_t * updatesRequired ); 
fcns.thunkname{fcnNum}='uint32int16voidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='psospaCheckForUpdate'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int16', 'tPicoFirmwareInfoPtr', 'int16Ptr', 'uint16Ptr'};fcnNum=fcnNum+1;
% PICO_STATUS psospaStartFirmwareUpdate ( int16_t handle , PicoUpdateFirmwareProgress progress ); 
fcns.thunkname{fcnNum}='uint32int16voidPtrThunk';fcns.name{fcnNum}='psospaStartFirmwareUpdate'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int16', 'FcnPtr'};fcnNum=fcnNum+1;
% PICO_STATUS psospaResetChannelsAndReportAllChannelsOvervoltageTripStatus ( int16_t handle , PICO_CHANNEL_OVERVOLTAGE_TRIPPED * allChannelsTrippedStatus , uint8_t nChannelTrippedStatus ); 
fcns.thunkname{fcnNum}='uint32int16voidPtruint8Thunk';fcns.name{fcnNum}='psospaResetChannelsAndReportAllChannelsOvervoltageTripStatus'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int16', 'tPicoChannelOvervoltageTrippedPtr', 'uint8'};fcnNum=fcnNum+1;
% PICO_STATUS psospaReportAllChannelsOvervoltageTripStatus ( int16_t handle , PICO_CHANNEL_OVERVOLTAGE_TRIPPED * allChannelsTrippedStatus , uint8_t nChannelTrippedStatus ); 
fcns.thunkname{fcnNum}='uint32int16voidPtruint8Thunk';fcns.name{fcnNum}='psospaReportAllChannelsOvervoltageTripStatus'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int16', 'tPicoChannelOvervoltageTrippedPtr', 'uint8'};fcnNum=fcnNum+1;
% PICO_STATUS psospaSetLedColours ( int16_t handle , const PICO_LED_COLOUR_PROPERTIES * colourProperties , uint32_t nColourProperties ); 
fcns.thunkname{fcnNum}='uint32int16voidPtruint32Thunk';fcns.name{fcnNum}='psospaSetLedColours'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int16', 'tPicoLedColourPropertiesPtr', 'uint32'};fcnNum=fcnNum+1;
% PICO_STATUS psospaSetLedBrightness ( int16_t handle , uint8_t brightness ); 
fcns.thunkname{fcnNum}='uint32int16uint8Thunk';fcns.name{fcnNum}='psospaSetLedBrightness'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int16', 'uint8'};fcnNum=fcnNum+1;
% PICO_STATUS psospaSetLedStates ( int16_t handle , const PICO_LED_STATE_PROPERTIES * stateProperties , uint32_t nStateProperties ); 
fcns.thunkname{fcnNum}='uint32int16voidPtruint32Thunk';fcns.name{fcnNum}='psospaSetLedStates'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int16', 'tPicoLedStatePropertiesPtr', 'uint32'};fcnNum=fcnNum+1;
% PICO_STATUS psospaSetAuxIoMode ( int16_t handle , PICO_AUXIO_MODE auxIoMode ); 
fcns.thunkname{fcnNum}='uint32int16PICO_AUXIO_MODEThunk';fcns.name{fcnNum}='psospaSetAuxIoMode'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int16', 'enPicoAuxIoMode'};fcnNum=fcnNum+1;
structs.tPicoTriggerInfo.packing=1;
structs.tPicoTriggerInfo.members=struct('status', 'uint32', 'segmentIndex', 'uint64', 'triggerIndex', 'uint64', 'triggerTime', 'double', 'timeUnits', 'enPicoTimeUnits', 'missedTriggers', 'uint64', 'timeStampCounter', 'uint64');
structs.tPicoTriggerChannelProperties.packing=1;
structs.tPicoTriggerChannelProperties.members=struct('thresholdUpper', 'int16', 'thresholdUpperHysteresis', 'uint16', 'thresholdLower', 'int16', 'thresholdLowerHysteresis', 'uint16', 'channel', 'enPicoChannel');
structs.tPicoCondition.packing=1;
structs.tPicoCondition.members=struct('source', 'enPicoChannel', 'condition', 'enPicoTriggerState');
structs.tPicoDirection.packing=1;
structs.tPicoDirection.members=struct('channel', 'enPicoChannel', 'direction', 'enPicoThresholdDirection', 'thresholdMode', 'enPicoThresholdMode');
structs.tPicoStreamingDataInfo.packing=1;
structs.tPicoStreamingDataInfo.members=struct('channel_', 'enPicoChannel', 'mode_', 'enPicoRatioMode', 'type_', 'enPicoDataType', 'noOfSamples_', 'int32', 'bufferIndex_', 'uint64', 'startIndex_', 'int32', 'overflow_', 'int16');
structs.tPicoStreamingDataTriggerInfo.packing=1;
structs.tPicoStreamingDataTriggerInfo.members=struct('triggerAt_', 'uint64', 'triggered_', 'int16', 'autoStop_', 'int16');
structs.tPicoScalingFactorsForRangeTypes.packing=1;
structs.tPicoScalingFactorsForRangeTypes.members=struct('channel', 'enPicoChannel', 'rangeMin', 'int64', 'rangeMax', 'int64', 'rangeType', 'enPicoProbeRangeInfo', 'offset', 'int16', 'scalingFactor', 'double');
structs.tDigitalChannelDirections.packing=1;
structs.tDigitalChannelDirections.members=struct('channel', 'enPicoPortDigitalChannel', 'direction', 'enPicoDigitalDirection');
structs.tPicoChannelOvervoltageTripped.packing=1;
structs.tPicoChannelOvervoltageTripped.members=struct('channel_', 'enPicoChannel', 'tripped_', 'uint8');
structs.tPicoUsbPowerDelivery.packing=1;
structs.tPicoUsbPowerDelivery.members=struct('valid_', 'uint8', 'busVoltagemV_', 'uint32', 'rpCurrentLimitmA_', 'uint32', 'partnerConnected_', 'uint8', 'ccPolarity_', 'uint8', 'attachedDevice_', 'enPicoUsbPowerDeliveryDeviceType', 'contractExists_', 'uint8', 'currentPdo_', 'uint32', 'currentRdo_', 'uint32');
structs.tPicoUsbPowerDetails.packing=1;
structs.tPicoUsbPowerDetails.members=struct('powerErrorLikely_', 'uint8', 'dataPort_', 'tPicoUsbPowerDelivery', 'powerPort_', 'tPicoUsbPowerDelivery');
structs.tPicoLedColourProperties.packing=1;
structs.tPicoLedColourProperties.members=struct('led_', 'enPicoLedSelect', 'hue_', 'uint16', 'saturation_', 'uint8');
structs.tPicoLedStateProperties.packing=1;
structs.tPicoLedStateProperties.members=struct('led_', 'enPicoLedSelect', 'state_', 'enPicoLedState');
structs.tPicoVersion.packing=1;
structs.tPicoVersion.members=struct('major_', 'int16', 'minor_', 'int16', 'revision_', 'int16', 'build_', 'int16');
structs.tPicoFirmwareInfo.packing=1;
structs.tPicoFirmwareInfo.members=struct('firmwareType', 'uint32', 'currentVersion', 'tPicoVersion', 'updateVersion', 'tPicoVersion', 'updateRequired', 'uint16');
enuminfo.enPicoDigitalPortHysteresis=struct('PICO_VERY_HIGH_400MV',0,'PICO_HIGH_200MV',1,'PICO_NORMAL_100MV',2,'PICO_LOW_50MV',3);
enuminfo.enPicoTextFormat=struct('PICO_JSON_DATA',0,'PICO_JSON_SCHEMA',1);
enuminfo.enPicoThresholdDirection=struct('PICO_ABOVE',0,'PICO_BELOW',1,'PICO_RISING',2,'PICO_FALLING',3,'PICO_RISING_OR_FALLING',4,'PICO_ABOVE_LOWER',5,'PICO_BELOW_LOWER',6,'PICO_RISING_LOWER',7,'PICO_FALLING_LOWER',8,'PICO_INSIDE',0,'PICO_OUTSIDE',1,'PICO_ENTER',2,'PICO_EXIT',3,'PICO_ENTER_OR_EXIT',4,'PICO_POSITIVE_RUNT',9,'PICO_NEGATIVE_RUNT',10,'PICO_NONE',2);
enuminfo.enPicoTriggerWithinPreTrigger=struct('PICO_DISABLE',0,'PICO_ARM',1);
enuminfo.enPicoCoupling=struct('PICO_AC',0,'PICO_DC',1,'PICO_DC_50OHM',50);
enuminfo.enPicoTriggerState=struct('PICO_CONDITION_DONT_CARE',0,'PICO_CONDITION_TRUE',1,'PICO_CONDITION_FALSE',2);
enuminfo.enPicoChannel=struct('PICO_CHANNEL_A',0,'PICO_CHANNEL_B',1,'PICO_CHANNEL_C',2,'PICO_CHANNEL_D',3,'PICO_CHANNEL_E',4,'PICO_CHANNEL_F',5,'PICO_CHANNEL_G',6,'PICO_CHANNEL_H',7,'PICO_PORT0',128,'PICO_PORT1',129,'PICO_PORT2',130,'PICO_PORT3',131,'PICO_EXTERNAL',1000,'PICO_TRIGGER_AUX',1001,'PICO_PULSE_WIDTH_SOURCE',268435456,'PICO_DIGITAL_SOURCE',268435457);
enuminfo.enPicoSigGenParameter=struct('PICO_SIGGEN_PARAM_OUTPUT_VOLTS',0,'PICO_SIGGEN_PARAM_SAMPLE',1,'PICO_SIGGEN_PARAM_BUFFER_LENGTH',2);
enuminfo.enPicoAuxIoMode=struct('PICO_AUXIO_INPUT',0,'PICO_AUXIO_HIGH_OUT',1,'PICO_AUXIO_LOW_OUT',2,'PICO_AUXIO_TRIGGER_OUT',3);
enuminfo.enPicoBandwidthLimiter=struct('PICO_BW_FULL',0,'PICO_BW_100KHZ',100000,'PICO_BW_20KHZ',20000,'PICO_BW_1MHZ',1000000,'PICO_BW_20MHZ',20000000,'PICO_BW_25MHZ',25000000,'PICO_BW_50MHZ',50000000,'PICO_BW_60MHZ',60000000,'PICO_BW_100MHZ',100000000,'PICO_BW_200MHZ',200000000,'PICO_BW_250MHZ',250000000,'PICO_BW_300MHZ',300000000,'PICO_BW_350MHZ',350000000,'PICO_BW_500MHZ',500000000);
enuminfo.enPicoAction=struct('PICO_CLEAR_ALL',1,'PICO_ADD',2,'PICO_CLEAR_THIS_DATA_BUFFER',4096,'PICO_CLEAR_WAVEFORM_DATA_BUFFERS',8192,'PICO_CLEAR_WAVEFORM_READ_DATA_BUFFERS',16384);
enuminfo.enPicoSweepType=struct('PICO_UP',0,'PICO_DOWN',1,'PICO_UPDOWN',2,'PICO_DOWNUP',3);
enuminfo.enPicoDigitalDirection=struct('PICO_DIGITAL_DONT_CARE',0,'PICO_DIGITAL_DIRECTION_LOW',1,'PICO_DIGITAL_DIRECTION_HIGH',2,'PICO_DIGITAL_DIRECTION_RISING',3,'PICO_DIGITAL_DIRECTION_FALLING',4,'PICO_DIGITAL_DIRECTION_RISING_OR_FALLING',5,'PICO_DIGITAL_MAX_DIRECTION',6);
enuminfo.enPicoThresholdMode=struct('PICO_LEVEL',0,'PICO_WINDOW',1);
enuminfo.enPicoProbeRangeInfo=struct('PICO_PROBE_NONE_NV',0,'PICO_X1_PROBE_NV',1,'PICO_X10_PROBE_NV',10);
enuminfo.enPicoUsbPowerDeliveryDeviceType=struct('Nothing',0,'Source',2,'Debug',3);
enuminfo.enPicoRatioMode=struct('PICO_RATIO_MODE_AGGREGATE',1,'PICO_RATIO_MODE_DECIMATE',2,'PICO_RATIO_MODE_AVERAGE',4,'PICO_RATIO_MODE_DISTRIBUTION',8,'PICO_RATIO_MODE_SUM',16,'PICO_RATIO_MODE_TRIGGER_DATA_FOR_TIME_CALCULATION',268435456,'PICO_RATIO_MODE_SEGMENT_HEADER',536870912,'PICO_RATIO_MODE_TRIGGER',1073741824,'PICO_RATIO_MODE_RAW',2147483648);
enuminfo.enPicoPulseWidthType=struct('PICO_PW_TYPE_NONE',0,'PICO_PW_TYPE_LESS_THAN',1,'PICO_PW_TYPE_GREATER_THAN',2,'PICO_PW_TYPE_IN_RANGE',3,'PICO_PW_TYPE_OUT_OF_RANGE',4);
enuminfo.enPicoLedState=struct('PICO_LED_AUTO',-1,'PICO_LED_OFF',0,'PICO_LED_ON',1);
enuminfo.enPicoSigGenTrigSource=struct('PICO_SIGGEN_NONE',0,'PICO_SIGGEN_SCOPE_TRIG',1,'PICO_SIGGEN_AUX_IN',2,'PICO_SIGGEN_EXT_IN',3,'PICO_SIGGEN_SOFT_TRIG',4,'PICO_SIGGEN_TRIGGER_RAW',5);
enuminfo.enPicoLedSelect=struct('PICO_LED_CHANNEL_A',0,'PICO_LED_CHANNEL_B',1,'PICO_LED_CHANNEL_C',2,'PICO_LED_CHANNEL_D',3,'PICO_LED_CHANNEL_E',4,'PICO_LED_CHANNEL_F',5,'PICO_LED_CHANNEL_G',6,'PICO_LED_CHANNEL_H',7,'PICO_LED_AWG',65536,'PICO_LED_AUX',131072);
enuminfo.enPicoDeviceResolution=struct('PICO_DR_8BIT',0,'PICO_DR_12BIT',1,'PICO_DR_14BIT',2,'PICO_DR_15BIT',3,'PICO_DR_16BIT',4,'PICO_DR_10BIT',10,'PICO_DR_10BIT_TURBO',26);
enuminfo.enPicoPortDigitalChannel=struct('PICO_PORT_DIGITAL_CHANNEL0',0,'PICO_PORT_DIGITAL_CHANNEL1',1,'PICO_PORT_DIGITAL_CHANNEL2',2,'PICO_PORT_DIGITAL_CHANNEL3',3,'PICO_PORT_DIGITAL_CHANNEL4',4,'PICO_PORT_DIGITAL_CHANNEL5',5,'PICO_PORT_DIGITAL_CHANNEL6',6,'PICO_PORT_DIGITAL_CHANNEL7',7);
enuminfo.enPicoChannelFlags=struct('PICO_CHANNEL_A_FLAGS',1,'PICO_CHANNEL_B_FLAGS',2,'PICO_CHANNEL_C_FLAGS',4,'PICO_CHANNEL_D_FLAGS',8,'PICO_CHANNEL_E_FLAGS',16,'PICO_CHANNEL_F_FLAGS',32,'PICO_CHANNEL_G_FLAGS',64,'PICO_CHANNEL_H_FLAGS',128,'PICO_PORT0_FLAGS',65536,'PICO_PORT1_FLAGS',131072,'PICO_PORT2_FLAGS',262144,'PICO_PORT3_FLAGS',524288);
enuminfo.enPicoTimeUnits=struct('PICO_FS',0,'PICO_PS',1,'PICO_NS',2,'PICO_US',3,'PICO_MS',4,'PICO_S',5);
enuminfo.enPicoDataType=struct('PICO_INT8_T',0,'PICO_INT16_T',1,'PICO_INT32_T',2,'PICO_UINT32_T',3,'PICO_INT64_T',4);
enuminfo.enPicoWaveType=struct('PICO_SINE',17,'PICO_SQUARE',18,'PICO_TRIANGLE',19,'PICO_RAMP_UP',20,'PICO_RAMP_DOWN',21,'PICO_SINC',22,'PICO_GAUSSIAN',23,'PICO_HALF_SINE',24,'PICO_DC_VOLTAGE',1024,'PICO_PWM',4096,'PICO_WHITENOISE',8193,'PICO_PRBS',8194,'PICO_ARBITRARY',268435456);
enuminfo.enPicoSigGenTrigType=struct('PICO_SIGGEN_RISING',0,'PICO_SIGGEN_FALLING',1,'PICO_SIGGEN_GATE_HIGH',2,'PICO_SIGGEN_GATE_LOW',3);
methodinfo=fcns;