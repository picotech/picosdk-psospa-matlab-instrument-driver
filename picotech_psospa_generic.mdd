<?xml version="1.0" encoding="utf-8"?>
<MATLABInstrumentDriver>
   <FileVersion>2.42</FileVersion>
   <DriverName>C:\Users\Cliona\OneDrive\Documents\Pico MATLAB Code\picosdk_psospa-matlab-instrument-driver-master\picotech_psospa_generic.mdd</DriverName>
   <DriverType>MATLAB generic</DriverType>
   <InstrumentType>Oscilloscope</InstrumentType>
   <InstrumentManufacturer>Pico Technology Ltd.</InstrumentManufacturer>
   <InstrumentModel>PicoScope 3000E Series</InstrumentModel>
   <InstrumentVersion>1.0</InstrumentVersion>
   <Identify/>
   <Reset/>
   <Selftest/>
   <Error/>
   <CreateInitCode>
      <Code>function init(obj)
% This function is called after the object is created.
% OBJ is the device object.
% End of function definition - DO NOT EDIT

% Copyright © 2024 Pico Technology Ltd.  All rights reserved.
% You may copy and distribute this file as long as it remains unmodified.
% SB

    fprintf('PicoScope 3000E Series (A API) MATLAB Instrument Driver');
    fprintf('\n');
    fprintf('\nCopyright © 2024 Pico Technology Ltd.  All rights reserved. \n')
    fprintf('\n');
    
    % Load libraries
    % ==============
    
    % Only load library once
    
    if (libisloaded('psospa'))
        
           % do nothing
           
    else
        
        if (ismac())
            
            [psospaNotFound, psospaWarnings] = loadlibrary('libpsospa.dylib', @psospaMFile, 'alias', 'psospa');
            
        elseif (isunix())
            
            [psospaNotFound, psospaWarnings] = loadlibrary('libpsospa.so', @psospaMFile, 'alias', 'psospa');
            
        elseif (ispc())
            
            [psospaNotFound, psospaWarnings] = loadlibrary('psospa.dll', @psospaMFile);
            
        else
            
            % do nothing
            
        end
        
    end
    
    % Load in enums and structures
    
    [~, obj.DriverData.structs, obj.DriverData.enums, ~] = psospaMFile();</Code>
   </CreateInitCode>
   <ConnectInitCode>
      <Type>MCode</Type>
      <Code>function init(obj)
% This function is called after the object is connected.
% OBJ is the device object.
% End of function definition - DO NOT EDIT

% Copyright © 2024 Pico Technology Ltd. All rights reserved.
% You may copy and distribute this file as long as it remains unmodified.
% SB

    disp('Opening PicoScope 3000E Series (A API) device');
    
    % Structure to hold satus values while connecting.
    connectStatus = [];
    
    % Temporary variable to store handle value
    unitHandle = 0;
	
	%Temporary variable for Power details
    powerDetails = struct;
    
    picoOK = PicoStatus.PICO_OK;
    
    % Obtain serial number input
    serialNum = get(obj, 'RsrcName');
    
    % determine if serial number given
    if length(serialNum) &gt; 0
        
        unitSerial = serialNum;
        
    else
        
        unitSerial = [];
        
    end
    
    % Open with 8 bit resolution
    resolution8bit = obj.DriverData.enums.enPicoDeviceResolution.PICO_DR_8BIT;
    obj.DriverData.resolution = resolution8bit;
    
    [connectStatus.openUnit, obj.DriverData.unitHandle, ~] = ...
        calllib('psospa','psospaOpenUnit',unitHandle, unitSerial,resolution8bit, powerDetails);
    
    % Validate handle
    if (obj.DriverData.unitHandle &gt; 0)
        
        unithandle = obj.DriverData.unitHandle;
%         
        % Set serial
        infoLine = blanks(40);
        reqSize = length(infoLine);
        
%         [connectStatus.unitSerial, obj.DriverData.unitSerial, reSize] = ...
%             calllib('psospa','psospaGetUnitInfo',unitHandle,infoLine, ...
%             length(infoLine),reqSize,PicoStatus.PICO_BATCH_AND_SERIAL);
%         
%         % Set variant
        infoLineV = blanks(15);
        reqSizeV = 15;
%         
%         [connectStatus.unitVariant, variant, ~] = calllib('psospa', ...
%             'psospaGetUnitInfo', unitHandle, infoLineV, length(infoLineV),...
%             reqSizeV, PicoStatus.PICO_VARIANT_INFO);
%         
%         set(obj, 'InstrumentModel', variant);
%         
%         % Set channel count
%         obj.DriverData.channelCount = str2num(obj.InstrumentModel(2));
%         
    elseif (connectStatus.openUnit == PicoStatus.PICO_NOT_FOUND)
        
        error('No unit found, please check connections.');
        
    else
        
        error('Status code: %d\n', connectStatus.openUnit);
        
    end
</Code>
   </ConnectInitCode>
   <CleanupCode>
      <Type>MCode</Type>
      <Code>function cleanup(obj)
% This function is called before the object is disconnected.
% OBJ is the device object.
% End of function definition - DO NOT EDIT

    if (isfield(obj.DriverData, 'unitHandle'))
        
        unitHandle = obj.DriverData.unitHandle;
        
        if (isempty(unitHandle))
            return;
        end
        
        if (~libisloaded('psospa'))
            
            return
            
        end
        
        % Close scope
        
        disconnectStatus = calllib('psospa','psospaCloseUnit', unitHandle);
        
        if (disconnectStatus == PicoStatus.PICO_OK)
            
            fprintf(['PicoScope closed successfully.\n']);
            
        elseif (disconnectStatus == PicoStatus.PICO_INVALID_HANDLE)
            
            return
            
        else
            
%             if (isfield(obj.DriverData, 'unitSerial'))
%                 
%                 error('Disconnect: ConnectionNotClosed',...
%                     ['Connection to PicoScope not closed. Status code %d\n']...
%                     ,disconnectStatus);
%                 
%             end
            
        end
        
%         % unload libraries if no other scopes are connected
%         
%         firestHandle = 0;
%         
%         if (ispc())
%             
%             firstHandle = 16384; % Windows PC
%             
%         else

    else
        warning('Disconnect:NoDevicesFound', 'Disconnect: No devices found.');
    end
%             
%             firstHandle = 1; % Mac and Linux
%             
%         end
%         
%         % test connection to other handles
%         lastHandle = firstHandle + 63 % obj.DriverData.constants.PICO_MAX_UNITS</Code>
   </CleanupCode>
   <GroupInfo>
      <Group>
         <Name>parent</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="parent1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>channelCount</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description/>
            </Property>
            <Property>
               <Name>resolution</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description/>
            </Property>
            <Property>
               <Name>unitHandle</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description/>
            </Property>
            <Property>
               <Name>unitSerial</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description/>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>psospaChannelCombinationsStateless</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function status = psospaChannelCombinationsStateless(obj,channelFlagsCombinations,nChannelCombinations,resolution,timebase)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

    status = calllib('psospa','psospaChannelCombinationsStateless',obj.DriverData.unitHandle,...
        channelFlagsCombinations,nChannelCombinations,resolution,timebase);
    
    if (status == PicoStatus.PICO_OK)
        
    else
        
        error('psospaChannelCombinationsStateless: status code %d, please refer to the PicoStatus.m file.', dec2hex(status));
        
    end</MCode>
               </Code>
               <Description/>
            </Method>
            <Method>
               <Name>psospaEnumerateUnits</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function status = psospaEnumerateUnits(obj, count, serials, serialLth)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

    status = calllib('psospa','psospaEnumerateUnits',count,serials,serialLth);
    
    if (status == PicoStatus.PICO_OK)
        
    else
        
        error('psospaEnumerateUnits: status code %d, please refer to the PicoStatus.m file.', dec2hex(status));
        
    end</MCode>
               </Code>
               <Description/>
            </Method>
            <Method>
               <Name>psospaFlashLed</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function status = psospaFlashLed(obj, start)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

    status = calllib('psospa','psospaFlashLed',obj.DriverData.unitHandle, start);
    
    if (status == PicoStatus.PICO_OK)
        
    else
        
        error('psospaFlashLed: status code %d, please refer to the PicoStatus.m file.', dec2hex(status));
        
    end</MCode>
               </Code>
               <Description/>
            </Method>
            <Method>
               <Name>psospaGetAdcLimits</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function status = psospaGetAdcLimits(obj, resolution, minValue, maxValue)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

    status = calllib('psospa','psospaGetAdcLimits', obj.DriverData.unitHandle, resolution, minValue, maxValue);
    
    if (status == PicoStatus.PICO_OK)
        
    else
        
        error('psospaGetAdcLimits: status code %d, please refer to the PicoStatus.m file.', dec2hex(status));
        
    end</MCode>
               </Code>
               <Description/>
            </Method>
            <Method>
               <Name>psospaGetAnalogueOffsetLimits</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function status = psospaGetAnalogueOffsetLimits(obj,range,coupling,maximumVoltage,minimimVoltage)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

    status = calllib('psospa','psospaGetAnalogueOffsetLimits',obj.DriverData.unitHandle,range,coupling,...
        maximumVoltage,minimumVoltage);
    
    if (status == PicoStatus.PICO_OK)
        
    else
        
        error('psospaGetAnalogueOffsetLimits: status code %d, please refer to the PicoStatus.m file.', dec2hex(status));
        
    end</MCode>
               </Code>
               <Description/>
            </Method>
            <Method>
               <Name>psospaGetDeviceResolution</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function status = psospaGetDeviceResolution(obj,resolution)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

    status = calllib('psospa','psospaGetDevieResolution',obj.DriverData.unitHandle,resolution);
    
    if (status == PicoStatus.PICO_OK)
        
    else
        
        error('psospaGetDeviceResolution: status code %d, please refer to the PicoStatus.m file.', dec2hex(status));
        
    end</MCode>
               </Code>
               <Description/>
            </Method>
            <Method>
               <Name>psospaGetMaximumAvailableMemory</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function status = psospaGetMaximumAvailableMemory(obj, nMaxSamples, resolution)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

    status = calllib('psospa','psospaGetMaximumAvailableMemory',obj.DriverData.unitHandle, nMaxSamples,resolution);
    
    if (status == PicoStatus.PICO_OK)
        
    else
        
        error('psospaGetMaximumAvailableMemory: status code %d, please refer to the PicoStatus.m file.', dec2hex(status));
        
    end</MCode>
               </Code>
               <Description/>
            </Method>
            <Method>
               <Name>psospaGetMinimumTimebaseStateless</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function status = psospaGetMinimumTimebaseStateless(obj, enabledChannelFlags, timebase, timeInterval, resolution)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

        status = calllib('psospa','psospaGetMinimumTimebaseStateless', obj.DriverData.unitHandle, enabledChannelFlags,...
        timebase, timeInterval, resolution);
    
        if (status == PicoStatus.PICO_OK)
        
        else
        
            error('psospaGetMinimumTimebaseStateless: status code %d, please refer to the PicoStatus.m file.', dec2hex(status));
        
        end</MCode>
               </Code>
               <Description/>
            </Method>
            <Method>
               <Name>psospaGetNoOfCaptures</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function status = psospaGetNoOfCaptures(obj,nCaptures)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

    status = calllib('psospa','psospaGetNoOfCaptures',obj.DriverData.unitHandle,nCaptures);
    
    if (status == PicoStatus.PICO_OK)
        
    else
        
        error('psospaGetNoOfCaptures: status code %d, please refer to the PicoStatus.m file.', dec2hex(status));
        
    end</MCode>
               </Code>
               <Description/>
            </Method>
            <Method>
               <Name>psospaGetNoOfProcessedCaptures</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function status = psospaGetNoOfProcessedCaptures(obj,nProcessedCaptures)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

    status = calllib('psospa','psospaGetNoOfProcessedCaptures',obj.DriverData.unitHandle,nProcessedCaptures);
    
    if (status == PicoStatus.PICO_OK)
        
    else
        
        error('psospaGetNoOfProcessedCaptures: status code %d, please refer to the PicoStatus.m file.', dec2hex(status));
        
    end</MCode>
               </Code>
               <Description/>
            </Method>
            <Method>
               <Name>psospaGetScalingValues</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function status = psospaGetScalingValues(obj,scalingValues,nChannels)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

    status = calllib('psospa','psospaGetScalingValues',obj.DriverData.unitHandle,scalingValues,nChannels);
    
    if (status == PicoStatus.PICO_OK)
        
    else
        
        error('psospaGetScalingValues: status code %d, please refer to the PicoStatus.m file.', dec2hex(status));
        
    end</MCode>
               </Code>
               <Description/>
            </Method>
            <Method>
               <Name>psospaGetStreamingLatestValues</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function status = psospaGetStreamingLatestValues(obj, streamingDataInfo, nStreamingDataInfos, triggerInfo)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

    status = calllib('psospa','psospaGetStreamingLatestValues',obj.DriverData.unitHandle,...
        streamingDataInfo, nStreamingDataInfos, triggerInfo);</MCode>
               </Code>
               <Description/>
            </Method>
            <Method>
               <Name>psospaGetTimebase</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function status = psospaGetTimebase(obj,timebase, noSamples, timeIntervalNanoseconds, maxSamples, segmentIndex)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

    status = calllib('psospa','psospaGetTimebase',obj.DriverData.unitHandle, timebase, noSamples,...
        timeIntervalNanoseconds, maxSamples,segmentIndex);</MCode>
               </Code>
               <Description/>
            </Method>
            <Method>
               <Name>psospaGetTriggerInfo</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function status = psospaGetTriggerInfo(obj,triggerInfo,firstSegmentIndex,segmentCount)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

    status = calllib('psospa','psospaGetTriggerInfo',obj.DriverData.unitHandle,triggerInfo,firstSegmentIndex,...
        segmentCount);
    
    if (status == PicoStatus.PICO_OK)
        
    else
        
        error('psospaGetTriggerInfo: status code %d, please refer to the PicoStatus.m file.', dec2hex(status));
        
    end</MCode>
               </Code>
               <Description/>
            </Method>
            <Method>
               <Name>psospaGetTriggerTimeOffset</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function status = psospaGetTriggerTimeOffset(obj,time,timeUnits,segmentIndex)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

    status = calllib('psospa','psospaGetTriggerTimeOffset',obj.DriverData.unitHandle,time,timeUnits,...
        segmentIndex);
    
    if (status == PicoStatus.PICO_OK)
        
    else
        
        error('psospaGetTriggerTimeOffset: status code %d, please refer to the PicoStatus.m file.', dec2hex(status));
        
    end</MCode>
               </Code>
               <Description/>
            </Method>
            <Method>
               <Name>psospaGetUnitInfo</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function status = psospaGetUnitInfo(obj, string, stringLength, requiredSize, info)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

    status = calllib('psospa','psospaGetUnitInfo',obj.DriverData.unitHandle, string, stringLength, requiredSize, info);
    
    if (status == PicoStatus.PICO_OK)
        
    else
        
        error('psospaGetUnitInfo: status code %d, please refer to the PicoStatus.m file.', dec2hex(status));
        
    end</MCode>
               </Code>
               <Description/>
            </Method>
            <Method>
               <Name>psospaGetValues</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function status = psospaGetValues(obj, startIndex, noOfSamples, downSampleRatio, downSampleRatioMode, segmentIndex, overflow)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.


    [status] = calllib('psospa','psospaGetValues',obj.DriverData.unitHandle,...
        startIndex, noOfSamples, downSampleRatio, downSampleRatioMode, segmentIndex, overflow);

   
    if (status == PicoStatus.PICO_OK)
        
    else
        
        error('psospaGetValues: status code %d, please refer to the PicoStatus.m file.', dec2hex(status));
        
    end</MCode>
               </Code>
               <Description/>
            </Method>
            <Method>
               <Name>psospaGetValuesAsync</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function status = psospaGetValuesAsync(obj,startIndex,noOfSamples,downSampleRatio,downSampleRatioMode,segmentIndex,...
    lpDataReady,pParameter)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

    status = calllib('psospa','psospaGetValuesAsync',obj.DriverData.unitHandle,startIndex,noOfSamples,...
        downSampleRatio,downSampleRatioMode,segmentIndex,lpDataReady,pParameter);
    
    if (status == PicoStatus.PICO_OK)
        
    else
        
        error('psospaGetValuesAsync: status code %d, please refer to the PicoStatus.m file.', dec2hex(status));
        
    end</MCode>
               </Code>
               <Description/>
            </Method>
            <Method>
               <Name>psospaGetValuesBulk</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function status = psospaGetValuesBulk(obj, startIndex, noOfSamples, fromSegmentIndex, toSegmentIndex, downSampleRatio, downSampleRatioMode, overflow)

% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

    status = calllib('psospa', 'psospaGetValuesBulk', obj.DriverData.unitHandle, startIndex, noOfSamples,...
        fromSegmentIndex, toSegmentIndex, downSampleRatio, downSampleRatioMode, overflow);
    
    if (status == PicoStatus.PICO_OK)
        
    else
        
        error('psospaGetValuesBulk: status code %d, please refer to the PicoStatus.m file.', dec2hex(status));
        
    end</MCode>
               </Code>
               <Description/>
            </Method>
            <Method>
               <Name>psospaGetValuesBulkAsync</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function status = psospaGetValuesBulkAsync(obj,startIndex,noOfSamples,fromSegmentIndex,toSegmentIndex,downSampleRatio,...
    downSampleRatioMode,lpDataReady,pParameter)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

    status = calllib('psospa','psospaGetValuesBulkAsync',obj.DriverData.unitHandle,startIndex,noOfSamples,...
        fromSegmentIndex,toSegmentIndex,downSampleRatio,downSampleRatioMode,lpDataReady,pParameter);
    
    if (status == PicoStatus.PICO_OK)
        
    else
        
        error('psospaGetValuesBulkAsync: status code %d, please refer to the PicoStatus.m file.', dec2hex(status));
        
    end</MCode>
               </Code>
               <Description/>
            </Method>
            <Method>
               <Name>psospaGetValuesOverlapped</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function status = psospaGetValuesOverlapped(obj,startIndex,noOfSamples,downSampleRatio,downSampleRatioMode,...
    fromSegmentIndex,toSegmentIndex,overflow)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

    status = calllib('psospa','psospaGetValuesOverlapped',obj.DriverData.unitHandle,startIndex,noOfSamples,...
        downSampleRatio,downSampleRatioMode,fromSegmentIndex,toSegmentIndex,overflow);
    
    if (status == PicoStatus.PICO_OK)
        
    else
        
        error('psospaGetValuesOverlapped: status code %d, please refer to the PicoStatus.m file.', dec2hex(status));
        
    end</MCode>
               </Code>
               <Description/>
            </Method>
            <Method>
               <Name>psospaGetValuesTriggerTimeOffsetBulk</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function status = psospaGetValuesTriggerTimeOffsetBulk(obj,time,timeUnits,fromSegmentIndex,toSegmentIndex)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

    status = calllib('psospa','psospaGetValuesTriggerTimeOffsetBulk',obj.DriverData.unitHandle,time,...
        timeUnits,fromSegmentIndex,toSegmentIndex);
    
    if (status == PicoStatus.PICO_OK)
        
    else
        
        error('psospaGetValuesTriggerTimeOffsetBulk: status code %d, please refer to the PicoStatus.m file.', dec2hex(status));
        
    end</MCode>
               </Code>
               <Description/>
            </Method>
            <Method>
               <Name>psospaIsReady</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function status = psospaIsReady(obj, ready)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

    status = calllib('psospa','psospaIsReady',obj.DriverData.unitHandle,ready);
    
    if (status == PicoStatus.PICO_OK)
        
    else
        
        error('psospaGetMinimumTimebaseStateless: status code %d, please refer to the PicoStatus.m file.', dec2hex(status));
        
    end</MCode>
               </Code>
               <Description/>
            </Method>
            <Method>
               <Name>psospaMemorySegments</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function status = psospaMemorySegments(obj, nSegments, nMaxSamples)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

    status = calllib('psospa', 'psospaMemorySegments', obj.DriverData.unitHandle, nSegments, nMaxSamples);
    
    if (status == PicoStatus.PICO_OK)
        
    else
        
        error('psospaMemorySegments: status code %d, please refer to the PicoStatus.m file.', dec2hex(status));
        
    end</MCode>
               </Code>
               <Description/>
            </Method>
            <Method>
               <Name>psospaMemorySegmentsBySamples</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function status = psospaMemorySegmentsBySamples(obj, nSamples, nMaxSegments)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

    status = calllib('psospa', 'psospaMemorySegmentsBySamples', obj.DriverData.unitHandle, nSamples, nMaxSegments);
    
    if (status == PicoStatus.PICO_OK)
        
    else
        
        error('psospaMemorySegmentsBySamples: status code %d, please refer to the PicoStatus.m file.', dec2hex(status));
        
    end</MCode>
               </Code>
               <Description/>
            </Method>
            <Method>
               <Name>psospaNearestSampleIntervalStateless</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function status = psospaNearestSampleIntervalStateless(obj,enabledChannelFlags,timeIntervalRequested,roundFaster,resolution,timebase,timeIntervalAvailable)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

    status = calllib('psospa','psospaNearestSampleIntervalStateless',obj.DriverData.unitHandle,enabledChannelFlags,...
        timeIntervalRequested,roundFaster,resolution,timebase,timeIntervalAvailable);
    
    if (status == PicoStatus.PICO_OK)
        
    else
        
        error('psospaNearestSampleIntervalStateless: status code %d, please refer to the PicoStatus.m file.', dec2hex(status));
        
    end</MCode>
               </Code>
               <Description/>
            </Method>
            <Method>
               <Name>psospaNoOfStreamingValues</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function status = psospaNoOfStreamingValues(obj,noOfValues)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

    status = calllib('psospa','psospaNoOfStreamingValues',obj.DriverData.unitHandle,noOfValues);
    
    if (status == PicoStatus.PICO_OK)
        
    else
        
        error('psospaNoOfStreamingValues: status code %d, please refer to the PicoStatus.m file.', dec2hex(status));
        
    end</MCode>
               </Code>
               <Description/>
            </Method>
            <Method>
               <Name>psospaPingUnit</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function status = psospaPingUnit(obj)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

    status = calllib('psospa','psospaPingUnit',obj.DriverData.unitHandle);
    
    if (status == PicoStatus.PICO_OK)
        
    else
        
        error('psospaPingUnit: status code %d, please refer to the PicoStatus.m file.', dec2hex(status));
        
    end</MCode>
               </Code>
               <Description/>
            </Method>
            <Method>
               <Name>psospaQueryMaxSegmentsBySamples</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function status = psospaQueryMaxSegmentsBySamples(obj, nSamples, nChannelsEnabled, nMaxSegments, resolution)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

    status = calllib('psospa','psospaQueryMaxSegmentsBySamples',obj.DriverData.unitHandle, nSamples, nChannelsEnabled,...
        nMaxSegments, resolution);
    
    if (status == PicoStatus.PICO_OK)
        
    else
        
        error('psospaQueryMaxSegmentsBySamples: status code %d, please refer to the PicoStatus.m file.', dec2hex(status));
        
    end</MCode>
               </Code>
               <Description/>
            </Method>
            <Method>
               <Name>psospaQueryOutputEdgeDetect</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function status = psospaQueryOutputEdgeDetect(obj, state)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

    status = calllib('psospa','psospaQueryOutputEdgeDetect',obj.DriverData.unitHandle,state);
    
    if (status == PicoStatus.PICO_OK)
        
    else
        
        error('psospaQueryOutputEdgeDetect: status code %d, please refer to the PicoStatus.m file.', dec2hex(status));
        
    end</MCode>
               </Code>
               <Description/>
            </Method>
            <Method>
               <Name>psospaRunBlock</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function status = psospaRunBlock(obj, noOfPreTriggerSamples, noOfPostTriggerSamples, timebase,timeIndisposedMs, segmentIndex)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

% no inputs for lpReady or pParameter as these are for callbacks that aren't
% used

    lpReady = [];
    pParameter = [];

    status = calllib('psospa','psospaRunBlock',obj.DriverData.unitHandle, noOfPreTriggerSamples,...
        noOfPostTriggerSamples, timebase, timeIndisposedMs, segmentIndex, lpReady, pParameter);
    
    if (status == PicoStatus.PICO_OK)
        
    else
        
        error('psospaRunBlock: status code %d, please refer to the PicoStatus.m file.', dec2hex(status));
        
    end</MCode>
               </Code>
               <Description/>
            </Method>
            <Method>
               <Name>psospaRunStreaming</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function status = psospaRunStreaming(obj, sampleInterval, sampleIntervalTimeUnits, maxPreTriggerSamples, maxPostTriggerSamples, autoStop, downSampleRatio, downSampleRatioMode)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

    status = calllib('psospa', 'psospaRunStreaming', obj.DriverData.unitHandle, sampleInterval,...
        sampleIntervalTimeUnits, maxPreTriggerSamples, maxPostTriggerSamples, autoStop,...
        downSampleRatio, downSampleRatioMode);
    
    if (status == PicoStatus.PICO_OK)
        
    else
        
        error('psospaRunStreaming: status code %d, please refer to the PicoStatus.m file.', dec2hex(status));
        
    end</MCode>
               </Code>
               <Description/>
            </Method>
            <Method>
               <Name>psospaSetChannelOff</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function status = psospaSetChannelOff(obj, channel)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

    status = calllib('psospa','psospaSetChannelOff', obj.DriverData.unitHandle, channel);
    
    if (status == PicoStatus.PICO_OK)
        
    else
        
        error('psospaSetChannelOff: status code %d, please refer to the PicoStatus.m file.', dec2hex(status));
        
    end</MCode>
               </Code>
               <Description/>
            </Method>
            <Method>
               <Name>psospaSetChannelOn</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function status = psospaSetChannelOn(obj, channel, coupling, rangeMin, rangeMax, rangeType, analogueOffset, bandwidth)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

    status = calllib('psospa', 'psospaSetChannelOn', obj.DriverData.unitHandle,...
        channel, coupling, rangeMin, rangeMax, rangeType, analogueOffset, bandwidth);
    
    if (status == PicoStatus.PICO_OK)
        
    else
        
        error('psospaSetChannelOn: status code %d, please refer to the PicoStatus.m file.', dec2hex(status));
        
    end</MCode>
               </Code>
               <Description/>
            </Method>
            <Method>
               <Name>psospaSetDataBuffer</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function status = psospaSetDataBuffer(obj, channel, buffer, nSamples, dataType, waveform, downSampleRatioMode, action)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.


    status = calllib('psospa','psospaSetDataBuffer', obj.DriverData.unitHandle,channel, buffer, nSamples,...
        dataType, waveform, downSampleRatioMode, action);
    
    if (status == PicoStatus.PICO_OK)
        
    else
        
        error('psospaSetDataBuffer: status code %d, please refer to the PicoStatus.m file.', dec2hex(status));
        
    end</MCode>
               </Code>
               <Description/>
            </Method>
            <Method>
               <Name>psospaSetDataBuffers</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function status = psospaSetDataBuffers(obj, channel, bufferMax, bufferMin, nSamples, dataType, waveform, downSampleRatioMode, action)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

    status = calllib('psospa', 'psospaSetDataBuffers', obj.DriverData.unitHandle, channel, bufferMax,...
        bufferMin, nSamples, dataType, waveform, downSampleRatioMode, action);
    
    if (status == PicoStatus.PICO_OK)
        
    else
        
        error('psospaSetDataBuffers: status code %d, please refer to the PicoStatus.m file.', dec2hex(status));
        
    end</MCode>
               </Code>
               <Description/>
            </Method>
            <Method>
               <Name>psospaSetDeviceResolution</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function status = psospaSetDeviceResolution(obj, resolution)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

    status = calllib('psospa','psospaSetDeviceResolution',obj.DriverData.unitHandle, resolution);
    
    if (status == PicoStatus.PICO_OK)
        
    else
        
        error('psospaSetDeviceResolution: status code %d, please refer to the PicoStatus.m file.', dec2hex(status));
        
    end
    
    obj.DriverData.resolution = resolution;</MCode>
               </Code>
               <Description/>
            </Method>
            <Method>
               <Name>psospaSetDigitalPortOff</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function status = psospaSetDigitalPortOff(obj, port)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.


    status = calllib('psospa', 'psospaSetDigitalPortOff', obj.DriverData.unitHandle, port)
    
    if (status == PicoStatus.PICO_OK)
        
    else
        
        error('psospaSetDigitalPortOff: status code %d, please refer to the PicoStatus.m file.', dec2hex(status));
        
    end</MCode>
               </Code>
               <Description/>
            </Method>
            <Method>
               <Name>psospaSetDigitalPortOn</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function status = psospaSetDigitalPortOn(obj, port, logicThresholdLevel, logicThresholdLevelLength, hysteresis)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

    status = calllib('psospa','psospaSetDigitalPortOn', obj.DriverData.unitHandle, port,...
        logicThresholdLevel, logicThresholdLevelLength, hysteresis);
    
    if (status == PicoStatus.PICO_OK)
        
    else
        
        error('psospaSetDigitalPortOn: status code %d, please refer to the PicoStatus.m file.', dec2hex(status));
        
    end</MCode>
               </Code>
               <Description/>
            </Method>
            <Method>
               <Name>psospaSetNoOfCaptures</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function status = psospaSetNoOfCaptures(obj,nCaptures)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

    status = calllib('psospa','psospaSetNoOfCaptures',obj.DriverData.unitHandle,nCaptures);
    
    if (status == PicoStatus.PICO_OK)
        
    else
        
        error('psospaSetNoOfCaptures: status code %d, please refer to the PicoStatus.m file.', dec2hex(status));
        
    end</MCode>
               </Code>
               <Description/>
            </Method>
            <Method>
               <Name>psospaSetOutputEdgeDetect</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function status = psospaSetOutputEdgeDetect(obj,state)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

    status = calllib('psospa','psospaSetOutputEdgeDetect',obj.DriverData.unitHandle,state);
    
    if (status == PicoStatus.PICO_OK)
        
    else
        
        error('psospaSetOutputEdgeDetect: status code %d, please refer to the PicoStatus.m file.', dec2hex(status));
        
    end</MCode>
               </Code>
               <Description/>
            </Method>
            <Method>
               <Name>psospaSetPulseWidthDigitalPortProperties</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function status = psospaSetPulseWidthDigitalPortProperties(obj,port,directions,nDirections)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

    status = calllib('psospa','psospaSetPulseWidthDigitalPortProperties',obj.DriverData.unitHandle,...
        port,directions,nDirections);
    
    if (status == PicoStatus.PICO_OK)
        
    else
        
        error('psospaSetPulseWidthDigitalPortProperties: status code %d, please refer to the PicoStatus.m file.', dec2hex(status));
        
    end</MCode>
               </Code>
               <Description/>
            </Method>
            <Method>
               <Name>psospaSetPulseWidthQualifierConditions</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function status = psospaSetPulseWidthQualifierConditions(obj, conditions,nConditions,action)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

    status = calllib('psospa','psospaSetPulseWidthQualifierConditions',obj.DriverData.unitHandle,...
        conditions,nConditions,action);
    
    if (status == PicoStatus.PICO_OK)
        
    else
        
        error('psospaSetPulseWidthQualifierConditions: status code %d, please refer to the PicoStatus.m file.', dec2hex(status));
        
    end</MCode>
               </Code>
               <Description/>
            </Method>
            <Method>
               <Name>psospaSetPulseWidthQualifierDirections</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function status = psospaSetPulseWidthQualifierDirections(obj,directions,nDirections)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

    status = calllib('psospa','psospaSetPulseWidthQualifierDirections',obj.DriverData.unitHandle,directions,...
        nDirections);
    
    if (status == PicoStatus.PICO_OK)
        
    else
        
        error('psospaSetPulseWidthQualifierDirections: status code %d, please refer to the PicoStatus.m file.', dec2hex(status));
        
    end</MCode>
               </Code>
               <Description/>
            </Method>
            <Method>
               <Name>psospaSetPulseWidthQualifierProperties</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function status = psospaSetPulseWidthQualifierProperties(obj,lower,upper,type)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

    status = calllib('psospa','psospaSetPulseWidthQualifierProperties',obj.DriverData.unitHandle,...
        lower,upper,type);
    
    if (status == PicoStatus.PICO_OK)
        
    else
        
        error('psospaSetPulseWidthQualifierProperties: status code %d, please refer to the PicoStatus.m file.', dec2hex(status));
        
    end</MCode>
               </Code>
               <Description/>
            </Method>
            <Method>
               <Name>psospaSetSimpleTrigger</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function status = psospaSetSimpleTrigger(obj, enable, source, threshold, direction, delay, autoTriggerMicroSeconds)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

    status = calllib('psospa','psospaSetSimpleTrigger', obj.DriverData.unitHandle, enable, source,...
        threshold, direction, delay, autoTriggerMicroSeconds);
    
    if (status == PicoStatus.PICO_OK)
        
    else
        
        error('psospaSetSimpleTrigger: status code %d, please refer to the PicoStatus.m file.', dec2hex(status));
        
    end</MCode>
               </Code>
               <Description/>
            </Method>
            <Method>
               <Name>psospaSetTriggerChannelConditions</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function status = psospaSetTriggerChannelConditions(obj,conditions,nConditions,action)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

    status = calllib('psospa','psospaSetTriggerChannelConditions',obj.DriverData.unitHandle,conditions,...
        nConditions,action);
    
    if (status == PicoStatus.PICO_OK)
        
    else
        
        error('psospaSetTriggerChannelConditions: status code %d, please refer to the PicoStatus.m file.', dec2hex(status));
        
    end</MCode>
               </Code>
               <Description/>
            </Method>
            <Method>
               <Name>psospaSetTriggerChannelDirections</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function status = psospaSetTriggerChannelDirections(obj,directions,nDirections)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

    status = calllib('psospa','psospaSetTriggerChannelDirections',obj.DriverData.unitHandle,directions,...
        nDirections);
    
    if (status == PicoStatus.PICO_OK)
        
    else
        
        error('psospaSetTriggerChannelDirections: status code %d, please refer to the PicoStatus.m file.', dec2hex(status));
        
    end</MCode>
               </Code>
               <Description/>
            </Method>
            <Method>
               <Name>psospaSetTriggerChannelProperties</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function status = psospaSetTriggerChannelProperties(obj,channelProperties,nChannelProperties,auxOutputEnable,autoTriggerMicroSeconds)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

    status = calllib('psospa','psospaSetTriggerChannelProperties',obj.DriverData.unitHandle,channelProperties,...
        nChannelProperties,auxOutputEnable,autoTriggerMicroSeconds);
    
    if (status == PicoStatus.PICO_OK)
        
    else
        
        error('psospaSetTriggerChannelProperties: status code %d, please refer to the PicoStatus.m file.', dec2hex(status));
        
    end</MCode>
               </Code>
               <Description/>
            </Method>
            <Method>
               <Name>psospaSetTriggerDelay</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function status = psospaSetTriggerDelay(obj,delay)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

    status = calllib('psospa','psospaSetTriggerDelay',obj.DriverData.unitHandle,delay);
    
    if (status == PicoStatus.PICO_OK)
        
    else
        
        error('psospaSetTriggerDelay: status code %d, please refer to the PicoStatus.m file.', dec2hex(status));
        
    end</MCode>
               </Code>
               <Description/>
            </Method>
            <Method>
               <Name>psospaSetTriggerDigitalPortProperties</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function status = psospaSetTriggerDigitalPortProperties(obj,port,directions,nDirections)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

    status = calllib('psospa','psospaSetTriggerDigitalPortProperties',obj.DriverData.unitHandle,port,...
        directions,nDirections);
    
    if (status == PicoStatus.PICO_OK)
        
    else
        
        error('psospaSetTriggerDigitalPortProperties: status code %d, please refer to the PicoStatus.m file.', dec2hex(status));
        
    end</MCode>
               </Code>
               <Description/>
            </Method>
            <Method>
               <Name>psospaSigGenApply</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function status = psospaSigGenApply(obj,sigGenEnabled,sweepEnabled,triggerEnabled,pFrequency,pStopFrequency,pFrequencyIncrement,pDwellTime)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

    status = calllib('psospa','psospaSigGenApply',obj.DriverData.unitHandle,sigGenEnabled,sweepEnabled,triggerEnabled,pFrequency,pStopFrequency,pFrequencyIncrement,pDwellTime);
    
    if (status == PicoStatus.PICO_OK)
        
    else
        
        error('psospaSigGenApply: status code %d, please refer to the PicoStatus.m file.', dec2hex(status));
        
    end</MCode>
               </Code>
               <Description/>
            </Method>
            <Method>
               <Name>psospaSigGenClockManual</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function status = psospaSigGenClockManual(obj,dacClockFrequency,prescaleRatio)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

    status = calllib('psospa','psospaSigGenClockManual',obj,DriverData.unitHandle,dacClockFrequency,prescaleRatio);
    
    if (status == PicoStatus.PICO_OK)
        
    else
        
        error('psospaSigGenClockManual: status code %d, please refer to the PicoStatus.m file.', dec2hex(status));
        
    end</MCode>
               </Code>
               <Description/>
            </Method>
            <Method>
               <Name>psospaSigGenFilter</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function status = psospaSigGenFilter(obj,filterState)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

    status = calllib('psospa','psospaSigGenFilter',obj.DriverData.unitHandle,filterState);
    
    if (status == PicoStatus.PICO_OK)
        
    else
        
        error('psospaSigGenFilter: status code %d, please refer to the PicoStatus.m file.', dec2hex(status));
        
    end</MCode>
               </Code>
               <Description/>
            </Method>
            <Method>
               <Name>psospaSigGenFrequency</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function status = psospaSigGenFrequency(obj,frequencyHz)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

    status = calllib('psospa','psospaSigGenFrequency',obj.DriverData.unitHandle,frequencyHz);
    
    if (status == PicoStatus.PICO_OK)
        
    else
        
        error('psospaSigGenFrequency: status code %d, please refer to the PicoStatus.m file.', dec2hex(status));
        
    end</MCode>
               </Code>
               <Description/>
            </Method>
            <Method>
               <Name>psospaSigGenFrequencyLimits</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function status = psospaSigGenFrequencyLimits(obj,waveType,numSamples,startFrequency,sweepEnabled,manualDacClockFrequency,...
    manualPrescaleRatio,maxStopFrequencyOut,minFrequencyStepOut,maxFrequencyStepOut,minDwellTimeOut,maxDwellTimeOut)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

    status = calllib('psospa','psospaSigGenFrequencyLimits',obj.DriverData.unitHandle,waveType,numSamples,startFrequency,...
        sweepFrequency,sweepEnabled,manualDacClockFrequency,manualPrescaleRatio,maxStopFrequencyOut,...
        minFrequencyStepOut,maxFrequencyStepOut,minDwellTimeOut,maxDwellTimeOut);
    
    if (status == PicoStatus.PICO_OK)
        
    else
        
        error('psospaSigGenFrequencyLimits: status code %d, please refer to the PicoStatus.m file.', dec2hex(status));
        
    end</MCode>
               </Code>
               <Description/>
            </Method>
            <Method>
               <Name>psospaSigGenFrequencySweep</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function status = psospaSigGenFrequencySweep(obj,stopFrequencyHz,frequencyIncrement,dwellTimeSeconds,sweepType)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

    status = calllib('psospa','psospaSigGenFrequencySweep',obj.DriverData.unitHandle,stopFrequencyHz,...
        frequencyIncrement,dwellTimeSeconds,sweepType);
    
    if (status == PicoStatus.PICO_OK)
        
    else
        
        error('psospaSigGenFrequencySweep: status code %d, please refer to the PicoStatus.m file.', dec2hex(status));
        
    end</MCode>
               </Code>
               <Description/>
            </Method>
            <Method>
               <Name>psospaSigGenLimits</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function status = psospaSigGenLimits(obj,parameter,minimumPermissibleValue,maximumPermissibleValue,step)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

    status = calllib('psospa','psospaSigGenLimits',obj.DriverData.unitHandle,parameter,minimumPermissibleValue,...
        maximumPermissibleValue, step);
    
    if (status == PicoStatus.PICO_OK)
        
    else
        
        error('psospaSigGenLimits: status code %d, please refer to the PicoStatus.m file.', dec2hex(status));
        
    end</MCode>
               </Code>
               <Description/>
            </Method>
            <Method>
               <Name>psospaSigGenPause</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function status = psospaSigGenPause(obj)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

    status = calllib('psospa','psospaSigGenPause',obj.DriverData.unitHandle);
    
    if (status == PicoStatus.PICO_OK)
        
    else
        
        error('psospaSigGenPause: status code %d, please refer to the PicoStatus.m file.', dec2hex(status));
        
    end</MCode>
               </Code>
               <Description/>
            </Method>
            <Method>
               <Name>psospaSigGenPhase</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function status = psospaSigGenPhase(obj,deltaPhase)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

    status = calllib('psospa','psospaSigGenPhase',obj.DriverData.unitHandle,deltaPhase);
    
    if (status == PicoStatus.PICO_OK)
        
    else
        
        error('psospaSigGenPhase: status code %d, please refer to the PicoStatus.m file.', dec2hex(status));
        
    end</MCode>
               </Code>
               <Description/>
            </Method>
            <Method>
               <Name>psospaSigGenPhaseSweep</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function status = psospaSigGenPhaseSweep(obj,stopDeltaPhase,deltaPhaseIncrement,swellCount,sweepType)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

    status = calllib('psospa','psospaSigGenPhaseSweep',obj.DriverData.unitHandle,stopDeltaPhase,...
        deltaPhaseIncrement,swellCount,sweepType);
    
    if (status == PicoStatus.PICO_OK)
        
    else
        
        error('psospaSigGenPhaseSweep: status code %d, please refer to the PicoStatus.m file.', dec2hex(status));
        
    end</MCode>
               </Code>
               <Description/>
            </Method>
            <Method>
               <Name>psospaSigGenRange</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function status = psospaSigGenRange(obj,peakToPeakVolts,offsetVolts)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

    status = calllib('psospa','psospaSigGenRange',obj.DriverData.unitHandle,peakToPeakVolts,offsetVolts);
    
    if (status == PicoStatus.PICO_OK)
        
    else
        
        error('psospaSigGenRange: status code %d, please refer to the PicoStatus.m file.', dec2hex(status));
        
    end</MCode>
               </Code>
               <Description/>
            </Method>
            <Method>
               <Name>psospaSigGenRestart</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function status = psospaSigGenRestart(obj)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

    status = calllib('psospa','psospaSigGenRestart',obj.DriverData.unitHandle);
    
    if (status == PicoStatus.PICO_OK)
        
    else
        
        error('psospaSigGenRestart: status code %d, please refer to the PicoStatus.m file.', dec2hex(status));
        
    end</MCode>
               </Code>
               <Description/>
            </Method>
            <Method>
               <Name>psospaSigGenSoftwareTriggerControl</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function status = psospaSigGenSoftwareTriggerControl(obj,triggerState)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

    status = calllib('psospa','psospaSigGenSoftwareTriggerControl',obj.DriverData.unitHandle,triggerState);
    
    if (status == PicoStatus.PICO_OK)
        
    else
        
        error('psospaSigGenSoftwareTriggerControl: status code %d, please refer to the PicoStatus.m file.', dec2hex(status));
        
    end</MCode>
               </Code>
               <Description/>
            </Method>
            <Method>
               <Name>psospaSigGenTrigger</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function status = psospaSigGenTrigger(obj,triggerType,triggerSource,cycles,autoTriggerPicoSeconds)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

    status = calllib('psospa','psospaSigGenTrigger',obj.DriverData.unitHandle,triggerType,triggerSource,...
        cycles,autoTriggerPicoSeconds);
    
    if (status == PicoStatus.PICO_OK)
        
    else
        
        error('psospaSigGenTrigger: status code %d, please refer to the PicoStatus.m file.', dec2hex(status));
        
    end</MCode>
               </Code>
               <Description/>
            </Method>
            <Method>
               <Name>psospaSigGenWaveform</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function status = psospaSigGenWaveform(obj, wavetype, buffer, bufferLength)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

    status = calllib('psospa','psospaSigGenWaveform',obj.DriverData.unitHandle,wavetype,buffer,bufferLength);
    
    if (status == PicoStatus.PICO_OK)
        
    else
        
        error('psospaSigGenWaveform: status code %d, please refer to the PicoStatus.m file.', dec2hex(status));
        
    end</MCode>
               </Code>
               <Description/>
            </Method>
            <Method>
               <Name>psospaSigGenWaveformDutyCycle</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function status = psospaSigGenWaveformDutyCycle(obj,dutyCyclePercent)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

    status = calllib('psospa','psospaSigGenWaveformDutyCycle',obj.DriverData.unitHandle,dutyCyclePercent)
    
    if (status == PicoStatus.PICO_OK)
        
    else
        
        error('psospaSigGenWaveformDutyCycle: status code %d, please refer to the PicoStatus.m file.', dec2hex(status));
        
    end</MCode>
               </Code>
               <Description/>
            </Method>
            <Method>
               <Name>psospaStop</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function status = psospaStop(obj)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

    status = calllib('psospa','psospaStop',obj.DriverData.unitHandle);
    
    if (status == PicoStatus.PICO_OK)
        
    else
        
        error('psospaStop: status code %d, please refer to the PicoStatus.m file.', dec2hex(status));
        
    end</MCode>
               </Code>
               <Description/>
            </Method>
            <Method>
               <Name>psospaStopUsingGetValuesOverlapped</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function status = psospaStopUsingGetValuesOverlapped(obj)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

    status = calllib('psospa','psospaStopUsingGetValuesOverlapped',obj.DriverData.unitHandle);
    
    if (status == PicoStatus.PICO_OK)
        
    else
        
        error('psospaStopUsingGetValuesOverlapped: status code %d, please refer to the PicoStatus.m file.', dec2hex(status));
        
    end</MCode>
               </Code>
               <Description/>
            </Method>
            <Method>
               <Name>psospaTriggerWithinPreTriggerSamples</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function status = psospaTriggerWithinPreTriggerSamples(obj,state)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

    status = calllib('psospa','psospaTriggerWithinPreTriggerSamples',obj.DriverData.unitHandle,state);
    
    if (status == PicoStatus.PICO_OK)
        
    else
        
        error('psospaTriggerWithinPreTriggerSamples: status code %d, please refer to the PicoStatus.m file.', dec2hex(status));
        
    end</MCode>
               </Code>
               <Description/>
            </Method>
         </MethodInfo>
      </Group>
   </GroupInfo>
</MATLABInstrumentDriver>